package Matrix;

import newproject.Vertex;

public class Matrix4 {
	double[] values;
	Matrix4(double[]values)
	{
		this.values=values;
	}
	public Matrix4 multiply(Matrix4 other)
	{
		double[] result = new double[16];
		for (int row=0; row<4; row++)
			for (int col=0; col<4; col++)
				for (int i=0; i<4; i++)
		result[row*4 + col] += this.values[row*4 + i] * other.values[i*4 + col];
		
		return new Matrix4(result);
	}
	public Matrix4 add(Matrix4 other)
	{
		double[] result = new double[16];
		for (int row=0; row<4; row++)
			for (int col=0; col<4; col++)
				result[row*4 + col] = this.values[row*4 + col]+ other.values[row*4 + col];
		
		return new Matrix4(result);
	}
	public Matrix4 subtract(Matrix4 other)
	{
		double[] result = new double[16];
		for (int row=0; row<4; row++)
			for (int col=0; col<4; col++)
				result[row*4 + col] = this.values[row*4 + col] - other.values[row*4 + col];
		return new Matrix4(result);
	}
	public static Matrix4 identityMatrix4()
	{
		return new Matrix4(new double[] {
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
		});
	}
	public static Matrix4 zeroMatrix4()
	{
		return new Matrix4(new double[] {
				0, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0
		});
	}
	public void rotateAroundX(double angle)
	{
		this.values = this.multiply(Matrix4.rotateAroundXMatrix(angle)).values;
	}
	public void rotateAroundY(double angle)
	{
		this.values = this.multiply(Matrix4.rotateAroundYMatrix(angle)).values;
	}
	public void rotateAroundZ(double angle)
	{
		this.values = this.multiply(Matrix4.rotateAroundZMatrix(angle)).values;
	}

	public Vertex transform(Vertex in)
	{
		return new Vertex(
				in.getX()*values[0] + in.getY()*values[4] + in.getZ()*values[8] + values[12],
				in.getX()*values[1] + in.getY()*values[5] + in.getZ()*values[9] + values[13],
				in.getX()*values[2] + in.getY()*values[6] + in.getZ()*values[10] + values[14]	
				);
	}
	public double getW(Vertex in)
	{
		return in.getX()*values[3] + in.getY()*values[7] + in.getZ()*values[11] + values[15];
	}
	public static Matrix4 rotateAroundXMatrix(double angle)
	{
		return new Matrix4(new double[] {
				1, 0, 0, 0,
				0, Math.cos(angle), -Math.sin(angle), 0,
				0, Math.sin(angle), Math.cos(angle), 0,
				0, 0, 0, 1
		});
	}
	public static Matrix4 rotateAroundYMatrix(double angle)
	{
		return new Matrix4(new double[] {
				Math.cos(angle), 0, Math.sin(angle), 0,
				0, 1, 0, 0,
				-Math.sin(angle), 0, Math.cos(angle), 0,
				0, 0, 0, 1
		});
	}
	public static Matrix4 rotateAroundZMatrix(double angle)
	{
		return new Matrix4(new double[] {
				Math.cos(angle), -Math.sin(angle), 0, 0,
				Math.sin(angle), Math.cos(angle), 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
		});
	}
	public void scaleX(double sx)
	{
		this.values = this.multiply(Matrix4.scale(sx,  1.0, 1.0)).values;
	}
	public void scaleY(double sy)
	{
		this.values = this.multiply( Matrix4.scale(1.0, sy, 1.0)).values;
	}
	public void scaleZ(double sz)
	{
		this.values = this.multiply( Matrix4.scale(1.0, 1.0, sz)).values;
	}
	public static Matrix4 scale(double sx, double sy, double sz)
	{
		return new Matrix4(new double[] {
				sx, 0, 0, 0,
				0, sy, 0, 0,
				0, 0, sz, 0,
				0, 0, 0, 1
		});
	}
	
	public void translateX(double tx)
	{
		this.values = this.multiply(Matrix4.translate(tx, 0.0, 0.0)).values;
	}
	public void translateY(double ty)
	{
		this.values = this.multiply(Matrix4.translate(0.0, ty, 0.0)).values;
	}
	public void translateZ(double tz)
	{
		this.values = this.multiply(Matrix4.translate(0.0, 0.0, tz)).values;
	}
	
	public static Matrix4 translate(double tx, double ty, double tz)
	{
		return new Matrix4(new double[] {
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				tx, ty, tz, 1
		});
	}
	public void shearXDirection(double sy, double sz)
	{
		this.values = this.multiply(new Matrix4(new double[] {
				1, sy, sz, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
		})).values;
	}
	public void shearYDirection(double sx, double sz)
	{
		this.values = this.multiply(new Matrix4(new double[] {
				1, 0, 0, 0,
				sx, 1, sz, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
		})).values;
	}
	public void shearZDirection(double sx, double sy)
	{
		this.values = this.multiply(new Matrix4(new double[] {
				1, 0, 0, 0,
				0, 1, 0, 0,
				sx, sy, 1, 0,
				0, 0, 0, 1
		})).values;
	}
	public void reflect(int axis)
	{
		switch (axis)
		{
		case 1:
			this.values = this.multiply(Matrix4.scale(-1.0, 1.0, 1.0)).values;
			break;
		case 2:
			this.values = this.multiply(Matrix4.scale(1.0, -1.0, 1.0)).values;
			break;
		case 3:
			this.values = this.multiply(Matrix4.scale(1.0, 1.0, -1.0)).values;
			break;
		default:
			break;
		}
	}
	
	public static Matrix4 perspectiveMatrix(double f, double n, double angle,
			double w, double h)
	{
		return new Matrix4(new double[] {
				1.0 / ((w/h)*Math.tan(angle/2)), 0, 0, 0,
				0, 1.0/Math.tan(angle/2), 0, 0,
				0, 0, f/(f-n), 1,
				0, 0, -f*n/(f-n), 0
		});
		/*
		return new Matrix4(new double[] {
				1.0 / ((w/h)*Math.tan(angle/2.0)), 0, 0, 0,
				0, 1.0/Math.tan(angle/2.0), 0, 0,
				0, 0, f/(f-n), -f*n/(f-n),
				0, 0, -1.0, 0
		});*/
	}
	
	public Matrix4 transpose()
	{
		double[] result = new double[16];
		for (int row = 0; row < 4; row++)
			for (int col = 0; col < 4; col++)
				result[row * 4 + col] = this.values[col * 4 + row];
		
		return new Matrix4(result);
	}
	
	public Matrix4 inverse()
	{
		double[] result = new double[16];
		double det = this.determinant();
		if (det == 0)  throw new ArithmeticException("Nu E inverse() pt " + this.getClass().getName());
		for (int row = 0; row<4; row++)
			for (int col =0; col <4; col++)
				result[col*4 + row] = ((row+col)%2==0? 1:-1) * this.determinantM3(row, col) / det;
		
		return new Matrix4(result);
	}
	private double determinantM3(int row, int col)
	{
		double[] M = new double[9];
		int pos = 0;
		for (int i=0; i<4; i++)
			for (int j=0; j<4; j++)
				if (i==row || j == col) continue;
				else {
					M[pos] = values[i*4+j];
					pos++;
				}
		
		return M[0*3 + 0] * M[1*3 + 1] * M[2*3 + 2] 
		+ M[0*3 + 1] * M[1*3 + 2] * M[2*3 + 0]
		+ M[0*3 + 2] * M[1*3 + 0] * M[2*3 + 1]
		- M[0*3 + 2] * M[1*3 + 1] * M[2*3 + 0]
		- M[0*3 + 0] * M[1*3 + 2] * M[2*3 + 1]
		- M[0*3 + 1] * M[1*3 + 0] * M[2*3 + 2]; 
	}
	
	public double determinant()
	{
		double A11 = values[0*4 + 0];
		double A12 = values[0*4 + 1];
		double A13 = values[0*4 + 2];
		double A14 = values[0*4 + 3];
		
		double A21 = values[1*4 + 0];
		double A22 = values[1*4 + 1];
		double A23 = values[1*4 + 2];
		double A24 = values[1*4 + 3];
				
		double A31 = values[2*4 + 0];
		double A32 = values[2*4 + 1];
		double A33 = values[2*4 + 2];
		double A34 = values[2*4 + 3];
		
		double A41 = values[3*4 + 0];
		double A42 = values[3*4 + 1];
		double A43 = values[3*4 + 2];
		double A44 = values[3*4 + 3];
		
		double result = 
				  A11*A22*A33*A44 + A11*A23*A34*A42 + A11*A24*A32*A43 
			    - A11*A24*A33*A42 - A11*A23*A32*A44 - A11*A22*A34*A43 
				- A12*A21*A33*A44 - A13*A21*A34*A42 - A14*A21*A32*A43
				+ A14*A21*A33*A42 + A13*A21*A32*A44 + A12*A21*A34*A43
				+ A12*A23*A31*A44 + A13*A24*A31*A42 + A14*A22*A31*A43
				- A14*A23*A31*A42 - A13*A22*A31*A44 - A12*A24*A31*A43
				- A12*A23*A34*A41 - A13*A24*A32*A41 - A14*A22*A33*A41
				+ A14*A23*A32*A41 + A13*A22*A34*A41 + A12*A24*A33*A41;
		
		return result;
	}
	public Matrix3 toMatrix3()
	{
		double[] result = new double[9];
		if (values[3] == 1.0)
		{
			return new Matrix3(new double[] {
					values[0], values[1], values[2],
					values[4], values[5], values[6],
					values[8], values[9], values[10]
			});
		}
		else
		{
			for (int i=0; i<3; i++)
				for (int j=0; j<3; j++)
					result[i*3 + j] = values[i*4 + j] / values[3];
		}
		return new Matrix3(result);
	}
	
	public boolean isEqual(Matrix4 other)
	{
		for (int row = 0; row < 4; row++)
			for (int col = 0; col < 4; col++)
				if (values[row*4 + col] != other.values[row*4 + col]) return false;
		return true;
	}
	
	public String toString()
	{
		String toReturn = "";
		for (int row = 0; row < 4; row++)
		{
			String currRow = " ";
			for (int col = 0; col < 4; col++)
				currRow  = currRow + values[row*4 + col] + " ";
			currRow = currRow + '\n';
			toReturn = toReturn + currRow;
		}
		return toReturn;
	}
}
